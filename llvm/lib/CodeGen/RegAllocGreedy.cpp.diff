diff --git a/lib/CodeGen/RegAllocGreedy.cpp b/lib/CodeGen/RegAllocGreedy.cpp
index 3c3f622..2ef69c3 100644
--- a/lib/CodeGen/RegAllocGreedy.cpp
+++ b/lib/CodeGen/RegAllocGreedy.cpp
@@ -105,6 +105,9 @@ class RAGreedy : public MachineFunctionPass,
   PQueue Queue;
   unsigned NextCascade;
 
+  // AVR specific: have we already unallocated REG_Y after a spill was done?
+  bool IsYReserved;
+
   // Live ranges pass through a number of stages as we try to allocate them.
   // Some of the stages may also create new live ranges:
   //
@@ -321,6 +324,7 @@ private:
                                    SmallVirtRegSet &, unsigned);
   bool tryRecoloringCandidates(PQueue &, SmallVectorImpl<unsigned> &,
                                SmallVirtRegSet &, unsigned);
+  void UndoRegYAllocation();
 };
 } // end anonymous namespace
 
@@ -346,7 +350,7 @@ FunctionPass* llvm::createGreedyRegisterAllocator() {
   return new RAGreedy();
 }
 
-RAGreedy::RAGreedy(): MachineFunctionPass(ID) {
+RAGreedy::RAGreedy(): MachineFunctionPass(ID), IsYReserved(false) {
   initializeLiveDebugVariablesPass(*PassRegistry::getPassRegistry());
   initializeSlotIndexesPass(*PassRegistry::getPassRegistry());
   initializeLiveIntervalsPass(*PassRegistry::getPassRegistry());
@@ -1484,6 +1488,31 @@ RAGreedy::tryInstructionSplit(LiveInterval &VirtReg, AllocationOrder &Order,
   return 0;
 }
 
+// AVR specific code used to handle the reservation of REG_Y if any other
+// register has been spilled.
+// :NOTE: KEEP THIS CONSTANT UPDATED with the backend!
+//   This has to be a define because of linkage problems between libraries.
+#define REG_Y   (51U)
+bool RA_ReserveREG_Y = false;
+bool RA_InSpillerCode = false;
+
+void RAGreedy::UndoRegYAllocation() {
+  // search through all virtual registers where REG_Y has been assigned and
+  // send them back to the work list for reallocation
+  for (unsigned i = 0, e = MRI->getNumVirtRegs(); i != e; ++i) {
+    unsigned VirtReg = TargetRegisterInfo::index2VirtReg(i);
+    if (MRI->reg_nodbg_empty(VirtReg))
+      continue;
+
+    for (MCRegAliasIterator AI(REG_Y, TRI, true); AI.isValid(); ++AI)
+      if (VRM->getPhys(VirtReg) == *AI) {
+        LiveInterval &LI = LIS->getInterval(VirtReg);
+        Matrix->unassign(LI);
+        enqueue(&LI);
+      }
+  }
+}
+#undef REG_Y
 
 //===----------------------------------------------------------------------===//
 //                             Local Splitting
@@ -2111,10 +2140,25 @@ unsigned RAGreedy::selectOrSplitImpl(LiveInterval &VirtReg,
     return PhysReg;
 
   // Finally spill VirtReg itself.
+  RA_InSpillerCode = true;
   NamedRegionTimer T("Spiller", TimerGroupName, TimePassesIsEnabled);
   LiveRangeEdit LRE(&VirtReg, NewVRegs, *MF, *LIS, VRM, this);
   spiller().spill(LRE);
   setStage(NewVRegs.begin(), NewVRegs.end(), RS_Done);
+  RA_InSpillerCode = false;
+
+  // AVR specific: If we have reached this point and the backend has notified
+  // it has inserted a spill via ReserveREG_Y, then search for any allocations
+  // of REG_Y in the live intervals and undo them.
+  if (!IsYReserved && RA_ReserveREG_Y) {
+    // do all this work only once
+    IsYReserved = true;
+    // update the reserved register list
+    MRI->freezeReservedRegs(VRM->getMachineFunction());
+    RegClassInfo.runOnMachineFunction(VRM->getMachineFunction());
+    // finally perform the real work
+    UndoRegYAllocation();
+  }
 
   if (VerifyEnabled)
     MF->verify(this, "After spilling");
@@ -2161,5 +2205,9 @@ bool RAGreedy::runOnMachineFunction(MachineFunction &mf) {
 
   allocatePhysRegs();
   releaseMemory();
+
+  IsYReserved = false;
+  RA_ReserveREG_Y = false;
+
   return true;
 }
